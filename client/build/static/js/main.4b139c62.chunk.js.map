{"version":3,"sources":["components/layouts/Navbar.js","components/layouts/Sidebar.js","components/Helper.js","components/Home.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","to","src","alt","type","data-toggle","id","href","Sidebar","Helper","serverURL","window","location","origin","showNotification","message","iziToast","show","title","messageSize","position","theme","pauseOnHover","progressBarColor","color","messageColor","icon","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","Home","props","useState","site","currentCopiedText","displayFilter","isLoading","state","setState","emails","setEmails","name","value","chartData","setChartData","useEffect","length","filter","email","isCopied","forceUpdate","validator","useRef","SimpleReactValidator","autoForceUpdate","startScrapOnClickHandler","a","current","allValid","Axios","post","response","data","status","undefined","result","emailsArray","forEach","element","emailObj","push","showMessages","copyOnClickHandler","text","onChange","e","target","placeholder","disabled","onClick","width","height","labelLine","label","dataKey","isAnimationActive","map","entry","key","defaultValue","style","counter","condition","onCopy","populateTableRow","Error","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4b139c62.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'izitoast/dist/css/iziToast.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row\">\r\n                <div className=\"text-center navbar-brand-wrapper d-flex align-items-center justify-content-center\">\r\n                    <Link className=\"navbar-brand brand-logo\" to=\"/\">\r\n                        <h3>Scrap Me</h3>\r\n                    </Link>\r\n                    <Link className=\"navbar-brand brand-logo-mini\" to=\"/\">\r\n                        <img src={process.env.PUBLIC_URL + '/assets/images/logo-mini.svg'} alt=\"logo\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar-menu-wrapper d-flex align-items-stretch\">\r\n                    <button className=\"navbar-toggler navbar-toggler align-self-center\" type=\"button\" data-toggle=\"minimize\">\r\n                        <span className=\"mdi mdi-menu\"></span>\r\n                    </button>\r\n                <ul className=\"navbar-nav navbar-nav-right\">\r\n                    <li className=\"nav-item full-screen-link\">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a className=\"nav-link\">\r\n                            <i className=\"mdi mdi-fullscreen\" id=\"fullscreen-button\"></i>\r\n                        </a>\r\n                    </li>\r\n                    <li className=\"nav-item \">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a className=\"nav-link\" href=\"#\">\r\n                            <i className=\"mdi mdi-format-line-spacing\"></i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n                <button className=\"navbar-toggler navbar-toggler-right d-lg-none align-self-center\" type=\"button\" data-toggle=\"offcanvas\">\r\n                    <span className=\"mdi mdi-menu\"></span>\r\n                </button>\r\n                </div>\r\n            </nav>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"sidebar sidebar-offcanvas\" id=\"sidebar\">\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/\">\r\n                            <span className=\"menu-title\">Home</span>\r\n                            <i className=\"mdi mdi-home menu-icon\"></i>\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Sidebar;","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.css';\n\nconst showNotification = (message = 'Something went wrong', type = 'error') => {\n    iziToast.show({\n        title: '',\n        message: message,\n        messageSize: 12,\n        position: 'topRight',\n        theme: 'dark',\n        pauseOnHover: true,\n        progressBarColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        color: type === 'success' ? '#565c70' : '#565c70',\n        messageColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        icon: type === 'success' ? 'mdi mdi-check' : 'mdi mdi-alert-circle-outline'\n    });\n};\n\n\nconst Helper = {\n    serverURL: window.location.origin,\n    showNotification: showNotification\n}\n\nexport default Helper;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Navbar from './layouts/Navbar';\r\nimport Sidebar from './layouts/Sidebar';\r\nimport Helper from './Helper';\r\nimport Axios from 'axios';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport { If } from 'react-if';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell,\r\n} from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#fe7c96'];\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\r\n}) => {\r\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n    const [state, setState] = useState({\r\n        site: '',\r\n        currentCopiedText: '',\r\n        displayFilter: 'all',\r\n        isLoading: false\r\n    });\r\n\r\n    const [emails, setEmails] = useState([]);\r\n    const [chartData, setChartData] = useState([\r\n            { name: 'Total Email', value: 100 },\r\n            { name: 'Copied', value: 50 },\r\n            { name: 'Not Copied', value: 50 }\r\n        ]);\r\n\r\n    useEffect(() => {\r\n        if (emails.length) {\r\n           setChartData([\r\n                { name: 'Total Email', value: emails.length },\r\n                { name: 'Copied', value: emails.filter(email => email.isCopied === true).length },\r\n                { name: 'Not Copied', value: emails.filter(email => email.isCopied === false).length }\r\n            ]);\r\n        }\r\n    }, [emails, state.currentCopiedText]);\r\n\r\n    //validator\r\n    const [, forceUpdate] = useState();\r\n    const validator = useRef(new SimpleReactValidator({\r\n        autoForceUpdate: { forceUpdate: forceUpdate },\r\n        className: 'small text-danger text-left mdi mdi-alert pt-1 pl-1'\r\n    }));\r\n\r\n    const startScrapOnClickHandler = async () => {\r\n        if (validator.current.allValid()) {\r\n            setState({\r\n                ...state,\r\n                isLoading: true\r\n            });\r\n            try {\r\n                const response = await Axios.post('/api/scrap', {\r\n                    site: state.site\r\n                });\r\n                setState({\r\n                    ...state,\r\n                    isLoading: false\r\n                });\r\n                if (response.data.data.status !== 'success') {\r\n                    Helper.showNotification(typeof response.data.data.result !== undefined ? response.data.data.result : 'Server error', 'error');\r\n                } else if (response.data.data.status === 'success') {\r\n                    let emailsArray = [];\r\n                    response.data.data.result.forEach((element, index) => {\r\n                        let emailObj = {\r\n                            index    : index,\r\n                            email    : element,\r\n                            isCopied: false,\r\n                        };\r\n                        emailsArray.push(emailObj);\r\n                    });\r\n                    setEmails(emailsArray);\r\n                }\r\n            } catch (error) {\r\n                Helper.showNotification(typeof error.response.data.data.result !== undefined ? error.response.data.data.result : 'Server error', 'error');\r\n            }\r\n            \r\n        } else {\r\n            validator.current.showMessages();\r\n            forceUpdate(1);\r\n        }\r\n    }\r\n\r\n    const copyOnClickHandler = (index, text) => {\r\n        setState({\r\n            ...state, \r\n            currentCopiedText: text\r\n        });\r\n        emails[index]['isCopied'] = true;\r\n    }\r\n\r\n    const populateTableRow = () => {\r\n        let counter = 1;\r\n        return emails.map((email, index) => {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <If condition={state.displayFilter === 'all'}>\r\n                        <tr>\r\n                            <td> {counter++} </td>\r\n                            <td><i className=\"mdi mdi-email-variant\"></i> <code>{email.email}</code> </td>\r\n                            <td>\r\n                                <CopyToClipboard \r\n                                    text={email.email}\r\n                                    onCopy={() => copyOnClickHandler(index, email.email)}\r\n                                >\r\n                                    <button className={\"btn btn-rounded btn-icon \"+(email.isCopied ? 'btn-success' : 'btn-danger')}>\r\n                                        <i className=\"mdi mdi-content-paste\"></i>\r\n                                    </button>\r\n                                </CopyToClipboard>\r\n                                    {email.isCopied ? <i className=\"ml-2 text-success mdi mdi-check\"></i> : ''}\r\n                                    \r\n                            </td>\r\n                        </tr>\r\n                    </If>\r\n                    <If condition={state.displayFilter === 'copied'}>\r\n                        <If condition={email.isCopied}>\r\n                            <tr>\r\n                                <td> {counter++} </td>\r\n                                <td><i className=\"mdi mdi-email-variant\"></i> <code>{email.email}</code> </td>\r\n                                <td>\r\n                                    <CopyToClipboard \r\n                                        text={email.email}\r\n                                        onCopy={() => copyOnClickHandler(index, email.email)}\r\n                                    >\r\n                                        <button className={\"btn btn-rounded btn-icon \"+(email.isCopied ? 'btn-success' : 'btn-danger')}>\r\n                                            <i className=\"mdi mdi-content-paste\"></i>\r\n                                        </button>\r\n                                    </CopyToClipboard>\r\n                                        {email.isCopied ? <i className=\"ml-2 text-success mdi mdi-check\"></i> : ''}\r\n                                        \r\n                                </td>\r\n                            </tr>\r\n                        </If>\r\n                    </If>\r\n                    <If condition={state.displayFilter === 'not-copied'}>\r\n                        <If condition={!email.isCopied}>\r\n                            <tr>\r\n                                <td> {counter++} </td>\r\n                                <td><i className=\"mdi mdi-email-variant\"></i> <code>{email.email}</code> </td>\r\n                                <td>\r\n                                    <CopyToClipboard \r\n                                        text={email.email}\r\n                                        onCopy={() => copyOnClickHandler(index, email.email)}\r\n                                    >\r\n                                        <button className={\"btn btn-rounded btn-icon \"+(email.isCopied ? 'btn-success' : 'btn-danger')} >\r\n                                            <i className=\"mdi mdi-content-paste\"></i>\r\n                                        </button>\r\n                                    </CopyToClipboard>\r\n                                        {email.isCopied ? <i className=\"ml-2 text-success mdi mdi-check\"></i> : ''} \r\n                                </td>\r\n                            </tr>\r\n                        </If>\r\n                    </If>\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n               <Navbar/>\r\n                <div className=\"container-fluid page-body-wrapper\">\r\n                    <Sidebar/>\r\n                    <div className=\"main-panel\">\r\n                        <div className=\"content-wrapper\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                    <div className=\"card-body text-center\">\r\n                                        <div className=\"forms-sample\">\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"text\" id=\"site\" name=\"site\" onChange={(e) => { setState({ ...state, site: e.target.value }) }} value={state.site} className=\"form-control\" placeholder=\"Enter Site Name\" />\r\n                                                {validator.current.message('site name', state.site, 'required|url')}\r\n                                            </div>\r\n                                            <button type=\"button\" disabled={state.isLoading} className=\"btn btn-gradient-primary mr-2\" onClick={startScrapOnClickHandler}>Start Scrapping{state.isLoading ? '...' : ''}</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                    <div className=\"card-body text-center\">\r\n                                        <h4 className=\"card-title\">Total Email Scrapped: {emails.length}</h4>\r\n                                        <PieChart width={220} height={220} className=\"mx-auto\">\r\n                                            <Pie\r\n                                                data={chartData}\r\n                                                cx={110}\r\n                                                cy={110}\r\n                                                labelLine={false}\r\n                                                label={renderCustomizedLabel}\r\n                                                outerRadius={55}\r\n                                                fill=\"#da8cff\"\r\n                                                dataKey=\"value\"\r\n                                                isAnimationActive={true}\r\n                                                >\r\n                                            {\r\n                                                chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                            }\r\n                                            </Pie>\r\n                                            <Legend/>\r\n                                        </PieChart>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-body\">\r\n                                            <div className=\"pt-3 pb-3\">\r\n                                                <div className=\"d-flex flex-column flex-md-row justify-content-md-between\">\r\n                                                    <div className=\"d-flex flex-row\">\r\n                                                        <div className=\"p-2\">\r\n                                                            <div className=\"input-group input-group-sm\">\r\n                                                            <div className=\"input-group-prepend\">\r\n                                                                <span className=\"input-group-text\">Display</span>\r\n                                                            </div>\r\n                                                            <select className=\"form-control form-control-sm btn btn-primary\" defaultValue={state.displayFilter} onChange={(e) => {setState({ ...state, displayFilter: e.target.value })}}>\r\n                                                                <option value=\"all\">All</option>\r\n                                                                <option value=\"copied\">Copied</option>\r\n                                                                <option value=\"not-copied\">Not Copied</option>\r\n                                                            </select>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table className=\"table table-striped scrapped-email-table\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th> # </th>\r\n                                                            <th> Email </th>\r\n                                                            <th style={{width: '160px'}}> Action </th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {populateTableRow()}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\r\n                    <div className=\"content-wrapper d-flex align-items-center text-center error-page bg-primary\">\r\n                    <div className=\"row flex-grow\">\r\n                        <div className=\"col-lg-7 mx-auto text-white\">\r\n                        <div className=\"row align-items-center d-flex flex-row\">\r\n                            <div className=\"col-lg-6 text-lg-right pr-lg-4\">\r\n                            <h1 className=\"display-1 mb-0\">404</h1>\r\n                            </div>\r\n                            <div className=\"col-lg-6 error-page-divider text-lg-left pl-lg-4\">\r\n                            <h2>SORRY!</h2>\r\n                            <h3 className=\"font-weight-light\">The page you’re looking for was not found.</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-5\">\r\n                            <div className=\"col-12 text-center mt-xl-2\">\r\n                                <Link className=\"text-white font-weight-medium\" to={'/'}>Back to home</Link>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Error;","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport './assets/css/App.scss';\r\nimport Home from './components/Home';\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n\t\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\r\n\t\t\t\t<Route component={Error}/>\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}