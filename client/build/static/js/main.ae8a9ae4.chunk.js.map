{"version":3,"sources":["redux/actions/TokenAction.js","components/layouts/Navbar.js","components/layouts/Sidebar.js","components/Home.js","components/Error.js","components/Login.js","redux/reducers/TokenReducer.js","redux/reducers/RootReducer.js","PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["TokenAction","token","type","payload","Navbar","history","useHistory","myDispatch","useDispatch","Fragment","className","to","src","alt","data-toggle","id","href","onClick","localStorage","removeItem","iziToast","show","title","message","messageSize","position","theme","pauseOnHover","color","messageColor","icon","push","Sidebar","target","rel","connect","state","tokenProp","TokenReducer","props","Error","dispatch","setTokenProp","UserAction","useState","username","password","isLoading","setState","forceUpdate","validator","useRef","SimpleReactValidator","autoForceUpdate","onChangeHandle","e","name","value","onSubmitHandle","a","preventDefault","current","allValid","Axios","post","response","data","setItem","showMessages","style","onSubmit","placeholder","onChange","existingTokens","getItem","action","undefined","RootReducer","combineReducers","PrivateRoute","Component","component","rest","useSelector","render","myStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","store","exact","path","Home","Login","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gQAOeA,EAPK,SAACC,GACjB,MAAO,CACHC,KAAM,YACNC,QAASF,I,iBCqEFG,G,MAjEA,WACX,IAAIC,EAAUC,cACRC,EAAaC,cAmBnB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,+EACX,yBAAKA,UAAU,qFACX,kBAAC,IAAD,CAAMA,UAAU,0BAA0BC,GAAG,KACzC,gDAEJ,kBAAC,IAAD,CAAMD,UAAU,+BAA+BC,GAAG,KAC9C,yBAAKC,IAA8B,+BAAgCC,IAAI,WAG/E,yBAAKH,UAAU,kDACX,4BAAQA,UAAU,kDAAkDR,KAAK,SAASY,cAAY,YAC1F,0BAAMJ,UAAU,kBAExB,wBAAIA,UAAU,+BACV,wBAAIA,UAAU,6BAEV,uBAAGA,UAAU,YACT,uBAAGA,UAAU,qBAAqBK,GAAG,wBAG7C,wBAAIL,UAAU,aAEV,uBAAGA,UAAU,WAAWM,KAAK,KACzB,uBAAGN,UAAU,kCAGrB,wBAAIA,UAAU,uBAEV,uBAAGA,UAAU,WAAWM,KAAK,IAAIC,QAAU,kBA9C9DV,EAAWP,EAAY,OACpBkB,aAAaC,WAAW,SACxBC,IAASC,KAAK,CACVC,MAAO,GACPC,QAAS,oBACTC,YAAa,GACbC,SAAU,WACVC,MAAO,OACPC,cAAc,EACdC,MAAO,UACPC,aAAa,UACbC,KAAM,uBAEVzB,EAAQ0B,KAAK,YAkCO,uBAAGrB,UAAU,qBAIzB,4BAAQA,UAAU,kEAAkER,KAAK,SAASY,cAAY,aAC1G,0BAAMJ,UAAU,uBChCrBsB,EA7BC,WACZ,OACI,kBAAC,IAAMvB,SAAP,KACI,yBAAKC,UAAU,4BAA4BK,GAAG,WAC1C,wBAAIL,UAAU,OACV,wBAAIA,UAAU,wBACV,uBAAGM,KAAK,6BAA6BiB,OAAO,SAASC,IAAI,sBAAsBxB,UAAU,YACrF,yBAAKA,UAAU,qBACX,yBAAKE,IAA8B,iCAAkCC,IAAI,YACzE,0BAAMH,UAAU,yBAEpB,yBAAKA,UAAU,uCACX,0BAAMA,UAAU,yBAAhB,gBAEJ,uBAAGA,UAAU,4DAGrB,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAC1B,0BAAMD,UAAU,cAAhB,aACA,uBAAGA,UAAU,iCCM1ByB,eANS,SAACC,GACrB,MAAO,CACHC,UAAWD,EAAME,gBAIVH,EAxBF,SAACI,GACV,OACI,kBAAC,IAAM9B,SAAP,KACI,yBAAKC,UAAU,sBACZ,kBAAC,EAAD,MACC,yBAAKA,UAAU,qCACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,mBAAf,gBCoBT8B,EA/BD,WACV,OACI,kBAAC,IAAM/B,SAAP,KACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,uDACX,yBAAKA,UAAU,+EACf,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BACf,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,kCACf,wBAAIA,UAAU,kBAAd,QAEA,yBAAKA,UAAU,oDACf,sCACA,wBAAIA,UAAU,qBAAd,qDAGJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,8BACf,uBAAGA,UAAU,gCAAgCM,KAAK,oBAAlD,yB,mFCqHbmB,eAfS,SAACC,GACrB,MAAO,CACHC,UAAWD,EAAME,iBAOE,SAACG,GACxB,MAAO,CACHC,aAAc,SAACzC,GAAD,OAAWwC,EAASE,EAAW1C,QAItCkC,EAjID,SAACI,GAAW,IAAD,EACKK,mBAAS,CAC/BC,SAAU,GACVC,SAAU,GACVC,WAAW,IAJM,mBACdX,EADc,KACPY,EADO,KAOjB3C,EAAUC,cAPO,EAUGsC,qBAAfK,EAVY,oBAWfC,EAAYC,iBAAO,IAAIC,IAAqB,CAC9CC,gBAAiB,CAAEJ,YAAaA,GAChCvC,UAAW,+CAGT4C,EAAiB,SAACC,GAAO,IAAD,EACFA,EAAEtB,OAAlBuB,EADkB,EAClBA,KAAMC,EADY,EACZA,MACdT,EAAS,2BACFZ,GADC,kBAEHoB,EAAOC,MAIVC,EAAc,uCAAG,WAAOH,GAAP,iBAAAI,EAAA,yDACnBJ,EAAEK,kBACEV,EAAUW,QAAQC,WAFH,wBAGfd,EAAS,2BACFZ,GADC,IAEJW,WAAW,KALA,kBASYgB,IAAMC,KAAK,aAAc5B,GATrC,OASL6B,EATK,OAWX7C,IAASC,KAAK,CACVC,MAAO,GACPC,QAAS,mBACTC,YAAa,GACbC,SAAU,WACVC,MAAO,OACPC,cAAc,EACdC,MAAO,UACPC,aAAa,UACbC,KAAM,kBAGN7B,EAAQgE,EAASC,KAAKjE,MAE1BiB,aAAaiD,QAAQ,QAASlE,GAC9BsC,EAAMG,aAAazC,GACnBI,EAAQ0B,KAAK,KA3BF,kDA8BXX,IAASC,KAAK,CACVC,MAAO,GACPC,QAAS,KAAM0C,SAASC,KAAK3C,QAC7BC,YAAa,GACbC,SAAU,WACVC,MAAO,OACPC,cAAc,EACdC,MAAO,UACPC,aAAa,UACbC,KAAM,iCAvCC,gCA8CfoB,EAAUW,QAAQO,eAClBnB,EAAY,GA/CG,0DAAH,sDAmDpB,OACI,kBAAC,IAAMxC,SAAP,KACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,uDACX,yBAAKA,UAAU,kDACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,iDACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,cAAc2D,MAAO,CAAEzC,MAAO,YAA5C,oBAEJ,0BAAMlB,UAAU,OAAO4D,SAAU,SAACf,GAC9BG,EAAeH,KAEf,yBAAK7C,UAAU,cACX,2BAAOR,KAAK,OAAOQ,UAAU,+BAA+B8C,KAAK,WAAWzC,GAAG,WAAWwD,YAAY,WAAWd,MAAOrB,EAAMS,SAAU2B,SAAUlB,IACjJJ,EAAUW,QAAQtC,QAAQ,WAAYa,EAAMS,SAAU,aAE3D,yBAAKnC,UAAU,cACX,2BAAOR,KAAK,WAAWQ,UAAU,+BAA+B8C,KAAK,WAAWzC,GAAG,WAAWwD,YAAY,WAAWd,MAAOrB,EAAMU,SAAU0B,SAAUlB,IACrJJ,EAAUW,QAAQtC,QAAQ,WAAYa,EAAMU,SAAU,aAE3D,yBAAKpC,UAAU,QACX,4BAAQR,KAAK,SAASQ,UAAU,8EAAhC,qB,QC3GtC+D,EAAiBvD,aAAawD,QAAQ,SAW7BpC,EATM,WAAqC,IAApCrC,EAAmC,uDAA3BwE,EAAgBE,EAAW,uCACrD,MAAoB,cAAhBA,EAAOzE,WACgB0E,IAAnBD,EAAOxE,UACPF,EAAQ0E,EAAOxE,SACZF,GAEAA,GCFA4E,EAHKC,YAAgB,CAChCxC,aAAcA,I,QCkBHyC,MAlBf,YAA0D,IAAvBC,EAAsB,EAAjCC,UAAyBC,EAAQ,6BAEjDjF,EAAQkF,aAAY,SAAA/C,GAAK,OAAIA,EAAME,gBAEzC,OACE,kBAAC,IAAD,iBACM4C,EADN,CAEEE,OAAQ,SAAA7C,GAAK,OACXtC,EACE,kBAAC+E,EAAczC,GAEf,kBAAC,IAAD,CAAU5B,GAAG,gBCHjB0E,EAAUC,YACfT,EACAU,OAAOC,8BAAgCD,OAAOC,gCAkBhCC,MAff,WAEC,OACC,kBAAC,IAAD,CAAUC,MAAOL,GAChB,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAcM,OAAK,EAACC,KAAK,IAAIX,UAAWY,IACxC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASX,UAAWa,IACtC,kBAAC,IAAD,CAAOb,UAAWzC,QCbHuD,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASf,OACP,kBAAC,IAAMgB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvF,c","file":"static/js/main.ae8a9ae4.chunk.js","sourcesContent":["const TokenAction = (token) => {\r\n    return {\r\n        type: 'SET_TOKEN',\r\n        payload: token\r\n    }\r\n};\r\n\r\nexport default TokenAction;","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport TokenAction from '../../redux/actions/TokenAction';\nimport iziToast from 'izitoast'\nimport 'izitoast/dist/css/iziToast.css';\n\nconst Navbar = () => {\n    let history = useHistory();\n    const myDispatch = useDispatch();\n\n    const logout = () => {\n\t    myDispatch(TokenAction(null)); \n        localStorage.removeItem('token');\n        iziToast.show({\n            title: '',\n            message: \"Logout Successful\",\n            messageSize: 12,\n            position: 'topRight',\n            theme: 'dark',\n            pauseOnHover: true,\n            color: '#565c70',\n            messageColor:'#00ffb8',\n            icon: 'mdi mdi-check'\n        });\n        history.push('/login');\n    }\n\n    return (\n        <React.Fragment>\n            <nav className=\"navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row\">\n                <div className=\"text-center navbar-brand-wrapper d-flex align-items-center justify-content-center\">\n                    <Link className=\"navbar-brand brand-logo\" to=\"/\">\n                        <h3>Visitor Counter</h3>\n                    </Link>\n                    <Link className=\"navbar-brand brand-logo-mini\" to=\"/\">\n                        <img src={process.env.PUBLIC_URL + '/assets/images/logo-mini.svg'} alt=\"logo\" />\n                    </Link>\n                </div>\n                <div className=\"navbar-menu-wrapper d-flex align-items-stretch\">\n                    <button className=\"navbar-toggler navbar-toggler align-self-center\" type=\"button\" data-toggle=\"minimize\">\n                        <span className=\"mdi mdi-menu\"></span>\n                    </button>\n                <ul className=\"navbar-nav navbar-nav-right\">\n                    <li className=\"nav-item full-screen-link\">\n                        {/* eslint-disable-next-line */}\n                        <a className=\"nav-link\">\n                            <i className=\"mdi mdi-fullscreen\" id=\"fullscreen-button\"></i>\n                        </a>\n                    </li>\n                    <li className=\"nav-item \">\n                        {/* eslint-disable-next-line */}\n                        <a className=\"nav-link\" href=\"#\">\n                            <i className=\"mdi mdi-format-line-spacing\"></i>\n                        </a>\n                    </li>\n                    <li className=\"nav-item nav-logout\">\n                        {/* eslint-disable-next-line */}\n                        <a className=\"nav-link\" href=\"#\" onClick={ () => logout() }>\n                            <i className=\"mdi mdi-power\"></i>\n                        </a>\n                    </li>\n                </ul>\n                <button className=\"navbar-toggler navbar-toggler-right d-lg-none align-self-center\" type=\"button\" data-toggle=\"offcanvas\">\n                    <span className=\"mdi mdi-menu\"></span>\n                </button>\n                </div>\n            </nav>\n        </React.Fragment>\n    );\n};\n\nexport default Navbar;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Sidebar = () => {\n    return (\n        <React.Fragment>\n            <nav className=\"sidebar sidebar-offcanvas\" id=\"sidebar\">\n                <ul className=\"nav\">\n                    <li className=\"nav-item nav-profile\">\n                        <a href=\"https://arifszn.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"nav-link\">\n                            <div className=\"nav-profile-image\">\n                                <img src={process.env.PUBLIC_URL + '/assets/images/faces/face1.jpg'} alt=\"profile\" />\n                                <span className=\"login-status online\"></span>\n                            </div>\n                            <div className=\"nav-profile-text d-flex flex-column\">\n                                <span className=\"font-weight-bold mb-2\">Ariful Alam</span>\n                            </div>\n                            <i className=\"mdi mdi-bookmark-check text-success nav-profile-badge\"></i>\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/\">\n                            <span className=\"menu-title\">Dashboard</span>\n                            <i className=\"mdi mdi-home menu-icon\"></i>\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n        </React.Fragment>\n    );\n};\n\nexport default Sidebar;","import React from 'react';\r\nimport Navbar from './layouts/Navbar';\r\nimport Sidebar from './layouts/Sidebar';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n               <Navbar/>\r\n                <div className=\"container-fluid page-body-wrapper\">\r\n                    <Sidebar/>\r\n                    <div className=\"main-panel\">\r\n                        <div className=\"content-wrapper\">\r\n                            HELLO\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tokenProp: state.TokenReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\r\n                    <div className=\"content-wrapper d-flex align-items-center text-center error-page bg-primary\">\r\n                    <div className=\"row flex-grow\">\r\n                        <div className=\"col-lg-7 mx-auto text-white\">\r\n                        <div className=\"row align-items-center d-flex flex-row\">\r\n                            <div className=\"col-lg-6 text-lg-right pr-lg-4\">\r\n                            <h1 className=\"display-1 mb-0\">404</h1>\r\n                            </div>\r\n                            <div className=\"col-lg-6 error-page-divider text-lg-left pl-lg-4\">\r\n                            <h2>SORRY!</h2>\r\n                            <h3 className=\"font-weight-light\">The page you’re looking for was not found.</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-5\">\r\n                            <div className=\"col-12 text-center mt-xl-2\">\r\n                            <a className=\"text-white font-weight-medium\" href=\"../../index.html\">Back to home</a>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Error;","import React, { useState, useRef } from 'react'\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport UserAction from '../redux/actions/TokenAction'\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport iziToast from 'izitoast'\r\nimport 'izitoast/dist/css/iziToast.css';\r\nimport Axios from 'axios';\r\n\r\nconst Login = (props) => {\r\n    const [state, setState] = useState({\r\n        username: '',\r\n        password: '',\r\n        isLoading: false\r\n    });\r\n\t\r\n    let history = useHistory();\r\n\r\n    //validator\r\n    const [, forceUpdate] = useState() //this is a dummy state, when form submitted, change the state so that message is rendered\r\n    const validator = useRef(new SimpleReactValidator({\r\n        autoForceUpdate: { forceUpdate: forceUpdate },\r\n        className: 'small text-danger mdi mdi-alert pt-1 pl-1'\r\n    }));\r\n\r\n    const onChangeHandle = (e) => {\r\n        const { name, value } = e.target;\r\n        setState({\r\n            ...state,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    const onSubmitHandle = async (e) => {\r\n        e.preventDefault();\r\n        if (validator.current.allValid()) {\r\n            setState({\r\n                ...state,\r\n                isLoading: true\r\n            });\r\n\r\n            try {\r\n                const response = await Axios.post('/api/login', state);\r\n                \r\n                iziToast.show({\r\n                    title: '',\r\n                    message: \"Login Successful\",\r\n                    messageSize: 12,\r\n                    position: 'topRight',\r\n                    theme: 'dark',\r\n                    pauseOnHover: true,\r\n                    color: '#565c70',\r\n                    messageColor:'#00ffb8',\r\n                    icon: 'mdi mdi-check'\r\n                });\r\n                //backend request\r\n                var token = response.data.token;\r\n                \r\n                localStorage.setItem('token', token);\r\n                props.setTokenProp(token);\r\n                history.push('/');\r\n            } catch (error) {\r\n                \r\n                iziToast.show({\r\n                    title: '',\r\n                    message: error.response.data.message,\r\n                    messageSize: 12,\r\n                    position: 'topRight',\r\n                    theme: 'dark',\r\n                    pauseOnHover: true,\r\n                    color: '#565c70',\r\n                    messageColor:'#ffafb4',\r\n                    icon: 'mdi mdi-alert-circle-outline'\r\n                });\r\n            }\r\n\r\n\r\n            \r\n        } else {\r\n            validator.current.showMessages();\r\n            forceUpdate(1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\r\n                    <div className=\"content-wrapper d-flex align-items-center auth\">\r\n                        <div className=\"row flex-grow\">\r\n                            <div className=\"col-lg-4 mx-auto\">\r\n                                <div className=\"auth-form-light text-left p-5 animated fadeIn\">\r\n                                    <div className=\"brand-logo\">\r\n                                        <h1 className=\"text-center\" style={{ color: '#da8cff' }}>Visitor Tracker</h1>\r\n                                    </div>\r\n                                    <form className=\"pt-3\" onSubmit={(e) => {\r\n                                        onSubmitHandle(e)\r\n                                    }}>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"text\" className=\"form-control form-control-lg\" name=\"username\" id=\"username\" placeholder=\"Username\" value={state.username} onChange={onChangeHandle} />\r\n                                            {validator.current.message('username', state.username, 'required')}\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"password\" className=\"form-control form-control-lg\" name=\"password\" id=\"password\" placeholder=\"Password\" value={state.password} onChange={onChangeHandle} />\r\n                                            {validator.current.message('password', state.password, 'required')}\r\n                                        </div>\r\n                                        <div className=\"mt-3\">\r\n                                            <button type=\"submit\" className=\"btn btn-block btn-gradient-primary btn-lg font-weight-medium auth-form-btn\" >\r\n                                                LOGIN\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n//redux state can be accessed as props in this component\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tokenProp: state.TokenReducer\r\n    }\r\n}\r\n\r\n/**\r\n * redux state can be change by calling 'props.setUserProp('demo user');'\r\n */\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setTokenProp: (token) => dispatch(UserAction(token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","const existingTokens = localStorage.getItem(\"token\");\r\n\r\nconst TokenReducer = (token = existingTokens, action) => {\r\n    if (action.type === 'SET_TOKEN') {\r\n        if (action.payload !== undefined)\r\n            token = action.payload;\r\n        return token;\r\n    } else {\r\n        return token;\r\n    }\r\n}\r\nexport default TokenReducer;","import TokenReducer from './TokenReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst RootReducer = combineReducers({\r\n    TokenReducer: TokenReducer\r\n});\r\nexport default RootReducer;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  //get reducer\n  const token = useSelector(state => state.TokenReducer);\n  \n  return (\n    <Route\n      {...rest}\n      render={props =>\n        token ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to=\"/login\" />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport './assets/css/App.scss';\r\nimport Home from './components/Home';\r\nimport Error from './components/Error';\r\nimport Login from './components/Login';\r\nimport {createStore} from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport RootReducer from './redux/reducers/RootReducer';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n//create reducer\r\nconst myStore = createStore(\r\n\tRootReducer,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nfunction App() {\r\n\t\r\n\treturn (\r\n\t\t<Provider store={myStore}>\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<PrivateRoute exact path=\"/\" component={Home}/>\r\n\t\t\t\t\t<Route exact path=\"/login\" component={Login}/>\r\n\t\t\t\t\t<Route component={Error}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t</Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}