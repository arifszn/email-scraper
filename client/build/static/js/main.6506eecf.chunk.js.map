{"version":3,"sources":["components/layouts/Navbar.js","components/layouts/Sidebar.js","components/Helper.js","components/OptionPopup.js","components/Loading.js","components/Home.js","components/Error.js","App.js","serviceWorker.js","index.js","assets/img/loader.gif"],"names":["Navbar","Fragment","className","to","src","alt","type","data-toggle","id","href","Sidebar","Helper","serverURL","window","location","origin","showNotification","message","iziToast","show","title","messageSize","position","theme","pauseOnHover","progressBarColor","color","messageColor","icon","textEllipsis","str","length","ending","substring","OptionPopup","props","useState","useEffect","Modal","onHide","handleClose","Header","closeButton","Title","Body","style","marginBottom","checked","options","acceptRootUrlOnly","onClick","e","setOptions","class","searchStrength","name","value","target","Loading","centered","loadingImage","Home","Math","PI","site","currentCopiedText","isLoading","openOptionPopup","state","setState","results","setResults","toggleOptionPopup","startScrapOnClickHandler","a","Axios","post","response","data","status","undefined","result","resultArray","forEach","singleSite","index","emails","email","test","resultObj","push","console","log","selectNode","node","range","document","createRange","selectNodeContents","select","getSelection","removeAllRanges","addRange","onChange","placeholder","rows","disabled","OverlayTrigger","placement","overlay","table","querySelector","execCommand","copyAllOnClickHandler","width","map","key","text","onCopy","condition","Error","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.6506eecf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'izitoast/dist/css/iziToast.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row\">\r\n                <div className=\"text-center navbar-brand-wrapper d-flex align-items-center justify-content-center\">\r\n                    <Link className=\"navbar-brand brand-logo\" to=\"/\">\r\n                        <h3>Scrap Me</h3>\r\n                    </Link>\r\n                    <Link className=\"navbar-brand brand-logo-mini\" to=\"/\">\r\n                        <img src={process.env.PUBLIC_URL + '/assets/images/logo-mini.svg'} alt=\"logo\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar-menu-wrapper d-flex align-items-stretch\">\r\n                    <button className=\"navbar-toggler navbar-toggler align-self-center\" type=\"button\" data-toggle=\"minimize\">\r\n                        <span className=\"mdi mdi-menu\"></span>\r\n                    </button>\r\n                <ul className=\"navbar-nav navbar-nav-right\">\r\n                    <li className=\"nav-item full-screen-link\">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a className=\"nav-link\">\r\n                            <i className=\"mdi mdi-fullscreen\" id=\"fullscreen-button\"></i>\r\n                        </a>\r\n                    </li>\r\n                    <li className=\"nav-item \">\r\n                        {/* eslint-disable-next-line */}\r\n                        <a className=\"nav-link\" href=\"#\">\r\n                            <i className=\"mdi mdi-format-line-spacing\"></i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n                <button className=\"navbar-toggler navbar-toggler-right d-lg-none align-self-center\" type=\"button\" data-toggle=\"offcanvas\">\r\n                    <span className=\"mdi mdi-menu\"></span>\r\n                </button>\r\n                </div>\r\n            </nav>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"sidebar sidebar-offcanvas\" id=\"sidebar\">\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/\">\r\n                            <span className=\"menu-title\">Home</span>\r\n                            <i className=\"mdi mdi-home menu-icon\"></i>\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Sidebar;","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.css';\n\nconst showNotification = (message = 'Something went wrong', type = 'error') => {\n    iziToast.show({\n        title: '',\n        message: message,\n        messageSize: 12,\n        position: 'topRight',\n        theme: 'dark',\n        pauseOnHover: true,\n        progressBarColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        color: type === 'success' ? '#565c70' : '#565c70',\n        messageColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        icon: type === 'success' ? 'mdi mdi-check' : 'mdi mdi-alert-circle-outline'\n    });\n};\n\nconst textEllipsis = (str, length, ending = '...') => {\n    if (length == null) {\n      length = 100;\n    }\n    if (str.length > length) {\n      return str.substring(0, length - ending.length) + ending;\n    } else {\n      return str;\n    }\n};\n\n\nconst Helper = {\n    serverURL: window.location.origin,\n    showNotification: showNotification,\n    textEllipsis: textEllipsis\n}\n\nexport default Helper;","import React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\nconst OptionPopup = (props) => {\n    const [state, setState] = useState({\n\n    });\n\n    useEffect(() => {\n\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal show={true} onHide={props.handleClose}>\n                <Modal.Header closeButton>\n                <Modal.Title>Search Options</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"col-md-12 grid-margin\">\n                        <div className=\"card\">\n                            <div className=\"mx-0 row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n                                        <div className=\"form-check\">\n                                            <label className=\"form-check-label\">\n                                                <input type=\"checkbox\" className=\"form-check-input\" checked={props.options.acceptRootUrlOnly}  onClick={(e) => { \n                                                    props.setOptions({...props.options, acceptRootUrlOnly: !props.options.acceptRootUrlOnly }) \n                                                }} /> Process Root Url Only <i className=\"input-helper\"></i>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card mt-2\">\n                            <div className=\"mx-0 row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n                                        <div className=\"form-check\">\n                                            <label class=\"form-check-label\">\n                                                <input type=\"radio\" class=\"form-check-input\" checked={props.options.searchStrength === 'deep'} name=\"searchStrength\" value=\"deep\" onClick={(e) => { props.setOptions({...props.options, searchStrength: e.target.value }) }}/> Deep Search <i class=\"input-helper\"></i>\n                                            </label>\n                                        </div>\n                                        <div className=\"form-check\">\n                                            <label class=\"form-check-label\">\n                                                <input type=\"radio\" class=\"form-check-input\" checked={props.options.searchStrength === 'quick'} name=\"searchStrength\" value=\"quick\" onClick={(e) => { props.setOptions({...props.options, searchStrength: e.target.value }) }}/> Quick Search <i class=\"input-helper\"></i>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default OptionPopup;","import React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport loadingImage from '../assets/img/loader.gif';\n\nconst Loading = (props) => {\n    const [state, setState] = useState({\n\n    });\n\n    useEffect(() => {\n\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal show={true} centered>\n                <Modal.Body className=\"mx-auto\">\n                    <img src={loadingImage} />\n                </Modal.Body>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default Loading;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Navbar from './layouts/Navbar';\r\nimport Sidebar from './layouts/Sidebar';\r\nimport Helper from './Helper';\r\nimport Axios from 'axios';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport { If } from 'react-if';\r\nimport {\r\n  PieChart, Pie, Legend, Tooltip, Cell,\r\n} from 'recharts';\r\nimport OptionPopup from './OptionPopup';\r\nimport Loading from './Loading';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport BootStrapTooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#fe7c96'];\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\r\n}) => {\r\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n    const [state, setState] = useState({\r\n        site: '',\r\n        currentCopiedText: '',\r\n        isLoading: false,\r\n        openOptionPopup: false\r\n    });\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [options, setOptions] = useState({\r\n        acceptRootUrlOnly: false,\r\n        searchStrength: 'deep'\r\n    });\r\n    const [chartData, setChartData] = useState([\r\n        { name: 'Total Email', value: 100 },\r\n        { name: 'Copied', value: 50 },\r\n        { name: 'Not Copied', value: 50 }\r\n    ]);\r\n\r\n    /* useEffect(() => {\r\n        if (emails.length) {\r\n           setChartData([\r\n                { name: 'Total Email', value: emails.length },\r\n                { name: 'Copied', value: emails.filter(email => email.isCopied === true).length },\r\n                { name: 'Not Copied', value: emails.filter(email => email.isCopied === false).length }\r\n            ]);\r\n        }\r\n    }, [emails, state.currentCopiedText]); */\r\n\r\n    const toggleOptionPopup = () => {\r\n        setState({\r\n            ...state,\r\n            openOptionPopup: !state.openOptionPopup\r\n        });\r\n    }\r\n\r\n    const startScrapOnClickHandler = async () => {\r\n        if (state.site !== '') {\r\n            setState({\r\n                ...state,\r\n                isLoading: true\r\n            });\r\n            try {\r\n                const response = await Axios.post('/api/scrap', {\r\n                    site: state.site,\r\n                    acceptRootUrlOnly: options.acceptRootUrlOnly,\r\n                    searchStrength: options.searchStrength\r\n                });\r\n                setState({\r\n                    ...state,\r\n                    isLoading: false\r\n                });\r\n                if (response.data.status !== 200) {\r\n                    Helper.showNotification(typeof response.data.data.result !== undefined ? response.data.data.result : 'Server error', 'error');\r\n                } else if (response.data.status === 200) {\r\n                    let resultArray = [];\r\n                    response.data.result.forEach((singleSite, index) => {\r\n                        if (singleSite.emails.length) {\r\n                            singleSite.emails.forEach((email, index) => {\r\n                                if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n                                    let resultObj = {\r\n                                        email    : email,\r\n                                        site: singleSite.site,\r\n                                    };\r\n                                    resultArray.push(resultObj);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    setResults(resultArray);\r\n                }\r\n            } catch (error) {\r\n                setState({\r\n                    ...state,\r\n                    isLoading: false\r\n                });\r\n                console.log(error);\r\n                Helper.showNotification('Server error', 'error');\r\n            }\r\n            \r\n        } else {\r\n            Helper.showNotification('Nothing to scrap', 'error');\r\n        }\r\n    }\r\n\r\n    const copyOnClickHandler = (text) => {\r\n        setState({\r\n            ...state, \r\n            currentCopiedText: text\r\n        });\r\n    }\r\n\r\n    const optionOnClickHandler = () => {\r\n        toggleOptionPopup();\r\n    }\r\n\r\n    const copyAllOnClickHandler = () => {\r\n        let table = document.querySelector('#scrapped-email-table');\r\n        let button = document.querySelector('#copy-all-button');\r\n        \r\n        selectNode(table);\r\n        document.execCommand('copy')\r\n    }\r\n\r\n    const selectNode = (node) => {\r\n        let range  =  document.createRange();\r\n        range.selectNodeContents(node)\r\n        let select =  window.getSelection()\r\n        select.removeAllRanges()\r\n        select.addRange(range)\r\n    }\r\n    \r\n\r\n    const populateTableRow = () => {\r\n        return results.map((email, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td> {index+1} </td>\r\n                    <td><code>{Helper.textEllipsis(email.email, 50)}</code> </td>\r\n                    <td> {Helper.textEllipsis(email.site, 50)} </td>\r\n                    <td>\r\n                        <CopyToClipboard \r\n                            text={email.email}\r\n                            onCopy={() => copyOnClickHandler(email.email)}\r\n                        >\r\n                            <button className={\"btn btn-rounded btn-icon btn-success\"}>\r\n                                <i className=\"mdi mdi-content-paste\"></i>\r\n                            </button>\r\n                        </CopyToClipboard>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n               <Navbar/>\r\n                <div className=\"container-fluid page-body-wrapper\">\r\n                    <Sidebar/>\r\n                    <div className=\"main-panel\">\r\n                        <div className=\"content-wrapper\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                    <div className=\"card-body text-center\">\r\n                                        <div className=\"forms-sample\">\r\n                                            <label className=\"text-muted\">Enter one domain/URL per line Below And Press Start Scrapping</label>\r\n                                            <div className=\"form-group\">\r\n                                                <textarea id=\"site\" name=\"site\" onChange={(e) => { setState({ ...state, site: e.target.value }) }} value={state.site} className=\"form-control\" placeholder='example.com &#10;example.com &#10;example.com' rows=\"6\"></textarea>\r\n                                            </div>\r\n                                            <button type=\"button\" disabled={state.isLoading} className=\"btn btn-gradient-info mr-2\" onClick={optionOnClickHandler}>Option</button>\r\n                                            <button type=\"button\" disabled={state.isLoading} className=\"btn btn-gradient-primary mr-2\" onClick={startScrapOnClickHandler}>Start Scrapping{state.isLoading ? '...' : ''}</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                    <div className=\"card-body text-center\">\r\n                                        <h4 className=\"card-title\">Total Email Scrapped: {results.length}</h4>\r\n                                        {/* <PieChart width={220} height={220} className=\"mx-auto\">\r\n                                            <Pie\r\n                                                data={chartData}\r\n                                                cx={110}\r\n                                                cy={110}\r\n                                                labelLine={false}\r\n                                                label={renderCustomizedLabel}\r\n                                                outerRadius={55}\r\n                                                fill=\"#da8cff\"\r\n                                                dataKey=\"value\"\r\n                                                isAnimationActive={true}\r\n                                                >\r\n                                            {\r\n                                                chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                                            }\r\n                                            </Pie>\r\n                                            <Legend/>\r\n                                        </PieChart> */}\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-body\">\r\n                                            <div className=\"pt-3 pb-3\">\r\n                                                <div className=\"d-flex flex-column flex-md-row justify-content-md-between\">\r\n                                                    <div className=\"d-flex flex-row\">\r\n                                                        <OverlayTrigger\r\n                                                            placement={'top'}\r\n                                                            overlay={\r\n                                                                <BootStrapTooltip>\r\n                                                                    Copy All\r\n                                                                </BootStrapTooltip>\r\n                                                            }\r\n                                                        >\r\n                                                            <button disabled={!results.length} id=\"copy-all-button\" className=\"btn btn-inverse-info btn-icon\" onClick={() => copyAllOnClickHandler()}>\r\n                                                                <i className=\"mdi mdi-content-copy\"></i>\r\n                                                            </button>\r\n                                                        </OverlayTrigger>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table id='scrapped-email-table' className=\"table table-striped scrapped-email-table\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th> # </th>\r\n                                                            <th> Email </th>\r\n                                                            <th> Site </th>\r\n                                                            <th style={{width: '160px'}}> </th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {populateTableRow()}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <If condition={state.openOptionPopup}>\r\n                <OptionPopup\r\n                    handleClose={toggleOptionPopup}\r\n                    options={options}\r\n                    setOptions={setOptions}\r\n                />\r\n            </If>\r\n            <If condition={state.isLoading}>\r\n                <Loading/>\r\n            </If>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\r\n                    <div className=\"content-wrapper d-flex align-items-center text-center error-page bg-primary\">\r\n                    <div className=\"row flex-grow\">\r\n                        <div className=\"col-lg-7 mx-auto text-white\">\r\n                        <div className=\"row align-items-center d-flex flex-row\">\r\n                            <div className=\"col-lg-6 text-lg-right pr-lg-4\">\r\n                            <h1 className=\"display-1 mb-0\">404</h1>\r\n                            </div>\r\n                            <div className=\"col-lg-6 error-page-divider text-lg-left pl-lg-4\">\r\n                            <h2>SORRY!</h2>\r\n                            <h3 className=\"font-weight-light\">The page you’re looking for was not found.</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-5\">\r\n                            <div className=\"col-12 text-center mt-xl-2\">\r\n                                <Link className=\"text-white font-weight-medium\" to={'/'}>Back to home</Link>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Error;","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport './assets/css/App.scss';\r\nimport Home from './components/Home';\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n\t\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\r\n\t\t\t\t<Route component={Error}/>\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/loader.9d016bdd.gif\";"],"sourceRoot":""}